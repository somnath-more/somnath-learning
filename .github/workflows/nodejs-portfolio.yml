name: Node.js Portfolio CI/CD

on:
  push:
    branches:
      - main
      - deployment
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  id-token: write
  contents: read

jobs:
  nodejs-portfolio:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: Nodejs/FreelanceProject-MERNB

    steps:
      - name: Checkout the code repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      # Uncomment this step if your application needs to be built
      # - name: Build the app
      #   run: npm run build

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v4
        with:
          push: true
          context: Nodejs/FreelanceProject-MERNB/
          tags: |
            ghcr.io/somnath-more/nodejs-portfolio:latest
            ghcr.io/somnath-more/nodejs-portfolio:${{ github.sha }}

      - name: Deploy on EC2 and Run Docker Compose
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "$EC2_KEY" > key.pem
          chmod 400 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_HOST@$EC2_USER << EOF
            # Login to GitHub Container Registry on EC2
            docker login ghcr.io -u ${{ github.actor }} -p $PAT_TOKEN
            # remove existing latest image
            docker rm ghcr.io/somnath-more/nodejs-portfolio:latest
            # Pull the latest Docker images if needed
            docker pull ghcr.io/somnath-more/nodejs-portfolio:latest

            # Change to the directory where docker-compose.yml is located
            ls -lh

            # Stop and remove existing containers (if any)
            docker-compose down || true

            # Start the application using docker-compose up
            docker-compose up -d

            echo "Deployment completed successfully on EC2!"
          EOF
